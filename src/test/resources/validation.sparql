#
# #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#   This file is part of the Smart Developer Hub Project:
#     http://www.smartdeveloperhub.org/
#
#   Center for Open Middleware
#     http://www.centeropenmiddleware.com/
# #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#   Copyright (C) 2015 Center for Open Middleware.
# #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#             http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
# #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#   Artifact    : org.smartdeveloperhub.curator:sdh-curator-connector:0.1.0-SNAPSHOT
#   Bundle      : sdh-curator-connector-0.1.0-SNAPSHOT.jar
# #-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=#
#

PREFIX : <http://www.w3.org/2012/12/rdf-val/SOTA-ex#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/'>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dt: <http://example.org/dataTime#>

SELECT DISTINCT
  ?issue
  (if(BOUND(?t), "passed", "missing") AS ?typeArc)
  (if(BOUND(?state) && (?state=:unassigned || ?state=:assigned), "passed", "invalid") AS ?stateValue)
  (if(BOUND(?reportedBy), "passed", "missing") AS ?reportedByArc)
  (if(BOUND(?reportedOn), "passed", "missing") AS ?reportedOnArc)
  (if(!BOUND(?reportedByCount), "expected 1, got 0", if(?reportedByCount=1, "passed", CONCAT("expected 1, got ", STR(?reportedByCount)))) AS ?reportedByArcCount)
  (if(!BOUND(?reproducedOn) || dt:gt(?reproducedOn,?reportedOn), "passed", "bad sequence") AS ?reproducedOnSequence)
  (if(BOUND(?missingRelatedIssuesStr), ?missingRelatedIssuesStr, "passed") AS ?missingRelatedIssues)
WHERE {

  # Get all viable :Issues by use of related predicates.
  {
    SELECT DISTINCT ?issue
    WHERE {
      { ?issue a :Issue } UNION { ?issue :reportedBy|:reportedOn|:reproducedBy|:reproducedOn|:related ?rprt }
    }
  }

  # Test for a type arc.
  OPTIONAL { ?issue a ?t FILTER (?t = :Issue) }

  # Test for a state arc.
  OPTIONAL { ?issue :state ?state }

  # Must have 1 reportedBy.
  OPTIONAL {
    SELECT
      ?issue
      (SAMPLE(?reportedBy1) AS ?reportedBy)
      (COUNT(?reportedBy1) AS ?reportedByCount)
     WHERE {
      OPTIONAL { ?issue :reportedBy ?reportedBy1 }
    } GROUP BY ?issue
  }

  OPTIONAL { ?issue :reportedOn ?reportedOn }

  OPTIONAL { ?issue :reproducedBy ?reproducedBy }

  OPTIONAL { ?issue :reproducedOn ?reproducedOn }

  # All :related issues must be known entities.
  OPTIONAL {
    SELECT
      ?issue
      (GROUP_CONCAT(CONCAT("<", STR(?referent), ">")) AS ?missingRelatedIssuesStr)
    WHERE {
      # List of missing issues related to ?issue.
      SELECT
        ?issue
        ?referent
        (SUM(if(BOUND(?referentP), 1, 0)) AS ?referentCount)
      WHERE {
        ?issue :related ?referent
        OPTIONAL { ?referent ?referentP ?referentO }
      } GROUP BY ?issue ?referent
      HAVING (SUM(if(BOUND(?referentP), 1, 0)) = 0)
    } GROUP BY ?issue
  }
}
